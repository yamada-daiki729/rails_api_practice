skip
body
body['data'].count
skip
_options
token
skip
request.headers['Authorization']
request.headers['Authorization]
skip
next
skip
Apikey.still_valid.find_by(access_token: "dc3b5273-7233-4486-81f9-808726be3a45")
Apikey.active.find_by(access_token: "dc3b5273-7233-4486-81f9-808726be3a45")
skip
request.headers["Authorization"]
request.headers["AccessToken"]
skip
tskip
nex
next
response.committed?
response_body
next
request.headers["AccessToken"]
skip
request.headers["Accept"]
request.headers["AccessToken"]
request.headers
skip
request.headers['AccessToken']
request.headers
request
response.headers
response
params
skip
response.headers['AccessToken']
skip
ski
skip
@user.save
@user
api_key
skip
create_access_token(@user)
@user
api_key
skip
 api_key
create_access_token(@user)
api_key
skip
be_present
response.headers['AccessToken']
sponse.headers['AccessToken']
skip
user
request_hash
skip
api_key.access_token
api_key.save
api_key
skip
api_key
skip
@user
@user.save
response
response.headers['AccessToken']
api_key
create_access_token(@user)
@user
api_key
skip
response.headers['AccessToken']
(response.headers
response
(response.headers['AccessToken']
skip
expect(response.headers['AccessToken']).to be_present
skip
 expect(body['data']['attributes']['name']).to eq(user.name)
skip
body
params
expect(body['data']['id'].to_i).to eq(user.id)
request_hash
skip
@user
skip
apikey.access_token
create_access_token(@user)
@user
api_key
skip
user
skip
user
skip
@user
skip
user.apikeys.still_valid.order(created_at: :desc).first
user
skip
find_valid_access_token(user)
user_has_access_token?(user)
user
skip
@user.apikeys
@user
skip
@user
skip
find_valid_access_token(user) 
user_has_access_token?(user)
user
skip
@user
exit
params
@user
skip
messages
skip
params.require(:user).permit(:name, :email, :password, :password_confirmation)
params
exit
params
skip
params
exit
params
skip
UserSerializer.new(@user).serialized_json
 json_string = UserSerializer.new(@user).serializable_hash.to_json
skip
@user
skip
login(params[:email], params[:password])
login
skip
exit
raise ActiveRecord::RecordNotFound
raise ActiveRecord::RecordNotFound unless @user
exit
login(email: params[:email], password: params[:password])
exit
params
User.last
 login(email: params[:email], password: params[:password])
exit
params[:password]
User.last
params[:email]
login(email:params[:email],password:params[:password])
exit
login(email:params[:email],password:params[:password])
params
login(email:params[:email],password:parmas[:password])
exit
params[:email]
params
skip
 ArticleSerializer.new(articles)
exit
ArticleSerializer.new(articles)
articles.count
articles

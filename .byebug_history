skip
@user
skip
apikey.access_token
create_access_token(@user)
@user
api_key
skip
user
skip
user
skip
@user
skip
user.apikeys.still_valid.order(created_at: :desc).first
user
skip
find_valid_access_token(user)
user_has_access_token?(user)
user
skip
@user.apikeys
@user
skip
@user
skip
find_valid_access_token(user) 
user_has_access_token?(user)
user
skip
@user
exit
params
@user
skip
messages
skip
params.require(:user).permit(:name, :email, :password, :password_confirmation)
params
exit
params
skip
params
exit
params
skip
UserSerializer.new(@user).serialized_json
 json_string = UserSerializer.new(@user).serializable_hash.to_json
skip
@user
skip
login(params[:email], params[:password])
login
skip
exit
raise ActiveRecord::RecordNotFound
raise ActiveRecord::RecordNotFound unless @user
exit
login(email: params[:email], password: params[:password])
exit
params
User.last
 login(email: params[:email], password: params[:password])
exit
params[:password]
User.last
params[:email]
login(email:params[:email],password:params[:password])
exit
login(email:params[:email],password:params[:password])
params
login(email:params[:email],password:parmas[:password])
exit
params[:email]
params
skip
 ArticleSerializer.new(articles)
exit
ArticleSerializer.new(articles)
articles.count
articles
